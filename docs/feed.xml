<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>tag:ajitek.net,2024:blog</id>
  <title>aji's Blog</title>
  <updated>2024-07-12T00:43:45.293389653Z</updated>
  <link rel="self" href="https://aji.github.io/blog/feed.xml" />
  <link href="https://aji.github.io/blog" />
  <icon>https://aji.github.io/blog/images/icon.png</icon>
  <author>
    <name>aji</name>
  </author>
  
    <entry>
      <id>tag:ajitek.net,2024:blog/posts/2024-07-11-undefined-behavior.md</id>
      <title>Undefined Behavior</title>
      <link rel="alternate" type="text/html" href="https://aji.github.io/blog/posts/2024-07-11-undefined-behavior.html" />
      <published>2024-07-11T12:00:00Z</published>
      <updated>2024-07-12T00:45:34Z</updated>
      <rights>
        This work (c) 2024 by Alex Iadicicco is licensed under CC BY-NC-SA 4.0.
        To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
      </rights>
      
        <summary>It's really not that complicated</summary>
      
      <content type="xhtml" xml:lang="en" xml:base="https://aji.github.io/blog">
        <div xmlns="http://www.w3.org/1999/xhtml">
          
          <p>There’s a lot of confusion among programmers about what C’s “undefined
behavior”, or “UB” as it is commonly abbreviated, is for, and why C compilers
are allowed to assume UB never happens. This post won’t talk about why the spec
contains UB, but will attempt to shed some light on what from my perspective is
a rather confusing aspect of how compilers work with it.</p>
<p>A particularly tricky aspect of UB for the typical C programmer is that it
sometimes causes the compiler to do counterintuitive things, even to seemingly
unrelated parts of the program. It’s a confusing moment at first when disabling
optimizations changes the visible effects of your program. If UB represents some
kind of abstract “out-of-spec” error condition, why is the compiler allowed to
change the behavior of statements leading up to it? There is a very reasonable
explanation you could give here, how the spec covers the meaning of whole
programs and not just individual statements, but I think it’s much easier
understood via time travel.</p>
<p>The <code>unreachable()</code> macro is one way for a program to explicitly invoke
undefined behavior. Because the behavior is undefined, the implementation of
<code>unreachable()</code> could be a program that sends a robot back in time to prevent
the code from running, then destroys the entire world so that none of us are
alive in a timeline where <code>unreachable()</code> finishes execution. A final
<code>printf("Undefined behavior can *never* occur.\n");</code> is the last thing the
universe sees.</p>
<p>This solution may of course have some retroactive effects that at first seem
unrelated. The time traveling robot may choose not to simply terminate the
program right before it enters <code>unreachable()</code>, and may instead prevent the
program from being started in the first place. It might even delete the code
that was compiled to produce the program, leaving a cryptic commit message
before deactivating itself in a car crusher. It might go even further back in
time to prevent the programmer’s parents from meeting. An oversight in the
robot’s programming might even cause it to be overzealous in its interpretation
of its mission, as it points the time machine to “1971, Bell Labs.” Technically,
the specification prohibits none of these things.</p>
<p>Pending the development of time travel, though, foresight will have to do.
Timelines containing an invocation of UB can be safely ignored, and while
compilers are not mandated to <em>prevent</em> its occurrence, or even informed that
they should assume it never occurs, it’s a useful model for what a conforming
compiler is allowed to do in the remaining timelines. The futures where the
optimizer breaks its neck doing assembly parkour are not futures we expect to
find ourselves in. Or at least, their behavior is undefined.</p>
        </div>
      </content>
    </entry>
  
    <entry>
      <id>tag:ajitek.net,2024:blog/posts/2024-07-01-fast-dice.md</id>
      <title>Fast Dice</title>
      <link rel="alternate" type="text/html" href="https://aji.github.io/blog/posts/2024-07-01-fast-dice.html" />
      <published>2024-07-01T12:00:00Z</published>
      <updated>2024-07-02T08:50:37Z</updated>
      <rights>
        This work (c) 2024 by Alex Iadicicco is licensed under CC BY-NC-SA 4.0.
        To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
      </rights>
      
        <summary>Don't take any chances without knowing the odds</summary>
      
      <content type="xhtml" xml:lang="en" xml:base="https://aji.github.io/blog">
        <div xmlns="http://www.w3.org/1999/xhtml">
          
            <img src="https://aji.github.io/blog/images/2024-07-01-fast-dice.jpg" />
          
          <p>I got nerd sniped by a fun JavaScript performance puzzle recently, having to do
with efficiently calculating the probability of a dice-based Bernoulli trial, for
the purpose of a game I’m working on. It goes like this:</p>
<ul>
<li><p>The player works to collect sets of up to 4 dice, which can be d4s, d6s, or d10s.</p></li>
<li><p>The player then chooses up to 10 sets of dice from their collection and rolls them.</p></li>
<li><p>If at least 3 of the sets rolled have a total of 10 or more, the player
advances to the next round. All rolled sets are removed from the player’s
collection, regardless of whether they advance or not.</p></li>
</ul>
<p>It’s helpful to be able to calculate the exact probabilities involved when
balancing the game, in addition to playtesting normally. Furthermore, having the
exact probabilities allows game design elements to reflect the chance of success
(e.g. showing things in a different color) in a way that gives the player <em>some</em>
useful information while still leaving a bit of uncertainty. However, with the
way this process is designed, calculating the probabilities presents a few
challenges:</p>
<ul>
<li><p>Sets can have any combination of dice, e.g. 4d6, 2d4+d10, 3d6+d10, etc.</p></li>
<li><p>Sets of dice are tested based on their sum.</p></li>
<li><p>The player advances if at least 3 sets score 10 or more, but have the option
to play more than 3 if they think it would help their chances enough to be worth
it.</p></li>
</ul>
<p>So, to get this problem out of the way and avoid coming up with any tricky
equations, I went with the most general solution I know: convolutions of
probability distributions. (This formulation is equivalent to multiplying
probability generating functions, since we are dealing with discrete random
variables.)</p>
<h2 id="background-too-convoluted">Background: Too convoluted?</h2>
<p>The calculation works in two passes:</p>
<ol type="1">
<li><p>For each set of dice, generate a CDF of the dice total by reducing the PMFs
of the dice with convolutions and doing a cumulative sum. The CDF at 9
represents the Bernoulli parameter for whether the set fails to reach a score
of 10.</p></li>
<li><p>For each Bernoulli parameter <em>p</em> calculated in the previous step, generate a
PMF [<em>p</em>, 1-<em>p</em>] to represent a random variable that has a value of 1 if
the test succeeds and 0 otherwise. Reduce these by convolution and do a
cumulative sum to get the CDF for the sum of these scores. The CDF at 2
represents the Bernoulli parameter for whether fewer than 3 sets succeeded.</p></li>
</ol>
<p>If you’re not familiar with convolution, <a href="https://www.youtube.com/watch?v=KuXjwB4LzSA">the 3blue1brown video</a> about it
is an excellent introduction. However, if you’re in a hurry, you can think of it
as a multiplication of two polynomials, where the <em>i</em>-th element of each input
is the coefficient of <em>x</em><sup><em>i</em></sup>. The fact that the probability
distribution of a sum of random variables is a convolution of their individual
distributions is extremely useful for numerically calculating probabilities
where simpler analytic solutions are out of reach, and is the foundation of the
approach outlined above.</p>
<h2 id="attempt-1-just-write-the-code">Attempt 1: Just write the code</h2>
<p>These days JavaScript VMs are very fast, so I generally try not to overthink
things unless there is a clear need for it. Naturally I wrote some code that
looked like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">range</span>(n) {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> [<span class="op">...</span><span class="bu">Array</span>(n)<span class="op">.</span><span class="fu">keys</span>()]<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">sum</span>(a) {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> a<span class="op">.</span><span class="fu">reduce</span>((x<span class="op">,</span> y) <span class="kw">=&gt;</span> x <span class="op">+</span> y<span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">convolve</span>(a<span class="op">,</span> b) {</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="fu">range</span>(a<span class="op">.</span><span class="at">length</span> <span class="op">+</span> b<span class="op">.</span><span class="at">length</span> <span class="op">-</span> <span class="dv">1</span>)<span class="op">.</span><span class="fu">map</span>((i) <span class="kw">=&gt;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">sum</span>(<span class="fu">range</span>(b<span class="op">.</span><span class="at">length</span>)<span class="op">.</span><span class="fu">map</span>((j) <span class="kw">=&gt;</span> (a[i <span class="op">-</span> j] <span class="op">??</span> <span class="dv">0</span>) <span class="op">*</span> b[j]))</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  )<span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">cumsum</span>(a) {</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> a<span class="op">.</span><span class="fu">map</span>((x) <span class="kw">=&gt;</span> (sum <span class="op">+=</span> x))<span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">dicepmf</span>(n) {</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="fu">range</span>(n <span class="op">+</span> <span class="dv">1</span>)<span class="op">.</span><span class="fu">map</span>((i) <span class="kw">=&gt;</span> (<span class="dv">1</span> <span class="op">&lt;=</span> i <span class="op">&amp;&amp;</span> i <span class="op">&lt;=</span> n <span class="op">?</span> <span class="dv">1</span> <span class="op">/</span> n <span class="op">:</span> <span class="dv">0</span>))<span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">pSetFail</span>(ds) {</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> cdf <span class="op">=</span> <span class="fu">cumsum</span>(ds<span class="op">.</span><span class="fu">map</span>((n) <span class="kw">=&gt;</span> <span class="fu">dicepmf</span>(n))<span class="op">.</span><span class="fu">reduce</span>(convolve<span class="op">,</span> [<span class="dv">1</span>]))<span class="op">;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> cdf[<span class="dv">9</span>] <span class="op">??</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">pSetsFail</span>(sets) {</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> pdf <span class="op">=</span> sets</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">map</span>(pSetFail)</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">map</span>((p) <span class="kw">=&gt;</span> [p<span class="op">,</span> <span class="dv">1</span> <span class="op">-</span> p])</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">reduce</span>(convolve<span class="op">,</span> [<span class="dv">1</span>])<span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> cdf <span class="op">=</span> <span class="fu">cumsum</span>(pdf)<span class="op">;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> cdf[<span class="dv">2</span>] <span class="op">??</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sets <span class="op">=</span> [</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>  [<span class="dv">4</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">6</span>]<span class="op">,</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>  [<span class="dv">4</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">6</span>]<span class="op">,</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>  [<span class="dv">4</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">6</span>]<span class="op">,</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>]<span class="op">;</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="dv">1</span> <span class="op">-</span> <span class="fu">pSetsFail</span>(sets))<span class="op">;</span></span></code></pre></div>
<p>If we run the above, we get <code>0.125</code>, which is what we would expect, since the
odds of d4+2d6 totaling 10 or more is exactly 50%. In other words, we’re
flipping a coin 3 times and trying to get HHH.</p>
<p>So this solution works and has the benefit of being concise and readable, but
how fast is it? Naive convolution is O(<em>n</em><sup>2</sup>), so let’s time its worst
case in our context, 10 attempts of 4d10:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> worstcase <span class="op">=</span> <span class="fu">range</span>(<span class="dv">10</span>)<span class="op">.</span><span class="fu">map</span>(() <span class="kw">=&gt;</span> [<span class="dv">10</span><span class="op">,</span> <span class="dv">10</span><span class="op">,</span> <span class="dv">10</span><span class="op">,</span> <span class="dv">10</span>])<span class="op">;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> start <span class="op">=</span> <span class="bu">performance</span><span class="op">.</span><span class="fu">now</span>()<span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (<span class="kw">let</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">1000</span><span class="op">;</span> i<span class="op">++</span>) <span class="fu">pSetsFail</span>(worstcase)<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> end <span class="op">=</span> <span class="bu">performance</span><span class="op">.</span><span class="fu">now</span>()<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>((start <span class="op">-</span> end) <span class="op">/</span> <span class="dv">1000</span>)<span class="op">;</span></span></code></pre></div>
<p>This comes out to about 1.4ms on my machine in Node.js, which is definitely
usable if you only need it occasionally. Okay, problem solved, let’s move onto
the next thing, we’ve got a game to build.</p>
<p>…But it does seem a bit slow, doesn’t it? We’re only dealing with 40 dice
here, and only up to d10. What if we want to offer d20s or d100s? We’re just
doing multiplications and additions, so surely we can do better, right? We
should be able to call this 100 times a frame if we want!</p>
<h2 id="attempt-2-loops">Attempt 2: Loops</h2>
<p>The <code>convolve</code> function we wrote is definitely a big part of the problem, and
you don’t need a profiler to figure that out. It’s two loops, where the inner
loop is generating an array just to calculate its sum. We’re also deliberately
looking up keys that don’t exist and using the nullish coalescing operator to
convert them to 0s, instead of explicitly checking the index. Furthermore,
we’re calculating up to 41 elements of each PMF when we only need the first 10.
We can omit those without changing the result. There’s a lot of room for some
cheap improvements and we owe it to ourselves to at least try, don’t we?</p>
<p>In particular, we suspect the following things might help:</p>
<ol type="1">
<li><p>Replace most calls to <code>range()</code>, <code>map()</code>, and <code>reduce()</code> with explicit loops and mutation.</p></li>
<li><p>Replace the nullish coalescing operator with an explicit bounds check.</p></li>
<li><p>Truncate the PMFs.</p></li>
</ol>
<p>When we make the above changes, the code looks like this:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">convolve</span>(a<span class="op">,</span> b<span class="op">,</span> limit) {</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> n <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">min</span>(limit<span class="op">,</span> a<span class="op">.</span><span class="at">length</span> <span class="op">+</span> b<span class="op">.</span><span class="at">length</span> <span class="op">-</span> <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> out <span class="op">=</span> []<span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">let</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    out[i] <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> (<span class="kw">let</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> b<span class="op">.</span><span class="at">length</span><span class="op">;</span> j<span class="op">++</span>) {</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">const</span> k <span class="op">=</span> i <span class="op">-</span> j<span class="op">;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> (<span class="dv">0</span> <span class="op">&lt;=</span> k <span class="op">&amp;&amp;</span> k <span class="op">&lt;</span> a<span class="op">.</span><span class="at">length</span>) {</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        out[i] <span class="op">+=</span> a[k] <span class="op">*</span> b[j]<span class="op">;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> out<span class="op">;</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">cumsum</span>(a) {</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">let</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> a<span class="op">.</span><span class="at">length</span><span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    a[i] <span class="op">+=</span> a[i <span class="op">-</span> <span class="dv">1</span>]<span class="op">;</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> a<span class="op">;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">dicepmf</span>(n) {</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> out <span class="op">=</span> [<span class="dv">0</span>]<span class="op">;</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">let</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;=</span> n<span class="op">;</span> i<span class="op">++</span>) {</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    out[i] <span class="op">=</span> <span class="dv">1</span> <span class="op">/</span> n<span class="op">;</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> out<span class="op">;</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">pSetFail</span>(ds) {</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> pdf <span class="op">=</span> [<span class="dv">1</span>]<span class="op">;</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">const</span> n <span class="kw">of</span> ds) {</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>    pdf <span class="op">=</span> <span class="fu">convolve</span>(pdf<span class="op">,</span> <span class="fu">dicepmf</span>(n)<span class="op">,</span> <span class="dv">10</span>)<span class="op">;</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> cdf <span class="op">=</span> <span class="fu">cumsum</span>(pdf)<span class="op">;</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> cdf<span class="op">.</span><span class="at">length</span> <span class="op">&lt;</span> <span class="dv">10</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> cdf[<span class="dv">9</span>]<span class="op">;</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">pSetsFail</span>(sets) {</span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> pdf <span class="op">=</span> [<span class="dv">1</span>]<span class="op">;</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">const</span> ds <span class="kw">of</span> sets) {</span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> p <span class="op">=</span> <span class="fu">pSetFail</span>(ds)<span class="op">;</span></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>    pdf <span class="op">=</span> <span class="fu">convolve</span>(pdf<span class="op">,</span> [p<span class="op">,</span> <span class="dv">1</span> <span class="op">-</span> p]<span class="op">,</span> <span class="dv">3</span>)<span class="op">;</span></span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> cdf <span class="op">=</span> <span class="fu">cumsum</span>(pdf)<span class="op">;</span></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> cdf<span class="op">.</span><span class="at">length</span> <span class="op">&lt;</span> <span class="dv">3</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> cdf[<span class="dv">2</span>]<span class="op">;</span></span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>We’ve sacrificed a bit of conciseness perhaps but this is still quite readable.
After quickly double-checking that our first example still prints 0.125, we time
it and find that each calculation of the worst case input only takes around 15
<em>microseconds</em>. That’s a 90x improvement!</p>
<p>Of course, we should probably identify how much of an impact each of the above
changes had, so here’s rough timing figures for each one individually:</p>
<ul>
<li><p>Loops and mutation: 340us, 4.0x improvement</p></li>
<li><p>Bounds checks: 1.0ms, 1.3x improvement</p></li>
<li><p>PMF truncation: 670us, 2.0x improvement</p></li>
</ul>
<p>Loops definitely seem to have the biggest impact by themselves… but where is
the 90x improvement coming from when taken together? Microbenching a language
like JavaScript in the particular way I’m doing isn’t an exact science but there
is definitely something fishy going on. Let’s try the other direction and remove
each optimization from the fastest solution to see which one results in the
biggest slowdown:</p>
<ul>
<li><p>No loops and mutation: 410us, 28x slowdown</p></li>
<li><p>No bounds checks: 290us, 20x slowdown</p></li>
<li><p>No PMF truncation: 39us, 2.6x slowdown</p></li>
</ul>
<p>Bizarre! Loops once again seem to responsible for the biggest improvement, but
the bounds checks are an impressive factor as well. I double checked the code to
make sure I didn’t get something wrong here, but using explicit bounds checks
does seem to be responsible for a noticeable improvement. I don’t know enough
about V8 to know why this would be the case, but it’s an interesting thing to
keep in mind when trying to write JIT-friendly code I suppose. Maybe I’ll do a
deep dive someday to figure out why this happens.</p>
<p>But okay, 15 microseconds is pretty dang fast, and that’s a worst case! If we
use the 3 sets of d4+2d6 input we’ve been using for validation, we get speeds
closer to 2.5 microseconds. So we’re done, right?</p>
<p>Right??</p>
<h2 id="attempt-3-insanity">Attempt 3: Insanity</h2>
<p>Our calculation has a very predictable shape: ten times do 10-element
convolutions of four sequences and sum their entries, then do 3-element
convolutions of ten sequences and sum those. What if we just… hard-coded this?
No loops, minimal branches. How fast would it be?</p>
<p>I won’t bore you with the details and will just show you the code I came up
with. I’m not going to <em>use</em> this code, of course. It just felt like a fun
puzzle. Here’s the function that calculates the same result as <code>pSetFail()</code>
above, with slightly different parameters:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">pSetFail</span>(d0<span class="op">,</span> d1<span class="op">,</span> d2<span class="op">,</span> d3) {</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> w0<span class="op">,</span> w1<span class="op">,</span> w2<span class="op">,</span> w3<span class="op">,</span> w4<span class="op">,</span> w5<span class="op">,</span> w6<span class="op">,</span> w7<span class="op">,</span> w8<span class="op">,</span> w9<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> x0<span class="op">,</span> x1<span class="op">,</span> x2<span class="op">,</span> x3<span class="op">,</span> x4<span class="op">,</span> x5<span class="op">,</span> x6<span class="op">,</span> x7<span class="op">,</span> x8<span class="op">,</span> x9<span class="op">;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> y0<span class="op">,</span> y1<span class="op">,</span> y2<span class="op">,</span> y3<span class="op">,</span> y4<span class="op">,</span> y5<span class="op">,</span> y6<span class="op">,</span> y7<span class="op">,</span> y8<span class="op">,</span> y9<span class="op">;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> z0<span class="op">,</span> z1<span class="op">,</span> z2<span class="op">,</span> z3<span class="op">,</span> z4<span class="op">,</span> z5<span class="op">,</span> z6<span class="op">,</span> z7<span class="op">,</span> z8<span class="op">,</span> z9<span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> m<span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  w0 <span class="op">=</span> d0 <span class="op">===</span> <span class="dv">0</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  w1 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">1</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  w2 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">2</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  w3 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">3</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  w4 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">4</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  w5 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">5</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  w6 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">6</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  w7 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">7</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  w8 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">8</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  w9 <span class="op">=</span> d0  <span class="op">&gt;=</span> <span class="dv">9</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>  m <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>  m <span class="op">*=</span> d0 <span class="op">===</span> <span class="dv">0</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> d0<span class="op">;</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>  m <span class="op">*=</span> d1 <span class="op">===</span> <span class="dv">0</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> d1<span class="op">;</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>  m <span class="op">*=</span> d2 <span class="op">===</span> <span class="dv">0</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> d2<span class="op">;</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>  m <span class="op">*=</span> d3 <span class="op">===</span> <span class="dv">0</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> d3<span class="op">;</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> (d1) {</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>      x0<span class="op">=</span>w0<span class="op">;</span>       x1<span class="op">=</span>w1<span class="op">;</span>       x2<span class="op">=</span>w2<span class="op">;</span>       x3<span class="op">=</span>w3<span class="op">;</span>       x4<span class="op">=</span>w4<span class="op">;</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>      x5<span class="op">=</span>w5<span class="op">;</span>       x6<span class="op">=</span>w6<span class="op">;</span>       x7<span class="op">=</span>w7<span class="op">;</span>       x8<span class="op">=</span>w8<span class="op">;</span>       x9<span class="op">=</span>w9<span class="op">;</span>       <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>      x0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        x1<span class="op">=</span>w0<span class="op">+</span>x0<span class="op">;</span>    x2<span class="op">=</span>w1<span class="op">+</span>x1<span class="op">;</span>    x3<span class="op">=</span>w2<span class="op">+</span>x2<span class="op">;</span>    x4<span class="op">=</span>w3<span class="op">+</span>x3<span class="op">;</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>      x5<span class="op">=</span>w4<span class="op">+</span>x4<span class="op">-</span>w0<span class="op">;</span> x6<span class="op">=</span>w5<span class="op">+</span>x5<span class="op">-</span>w1<span class="op">;</span> x7<span class="op">=</span>w6<span class="op">+</span>x6<span class="op">-</span>w2<span class="op">;</span> x8<span class="op">=</span>w7<span class="op">+</span>x7<span class="op">-</span>w3<span class="op">;</span> x9<span class="op">=</span>w8<span class="op">+</span>x8<span class="op">-</span>w4<span class="op">;</span> <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">6</span><span class="op">:</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>      x0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        x1<span class="op">=</span>w0<span class="op">+</span>x0<span class="op">;</span>    x2<span class="op">=</span>w1<span class="op">+</span>x1<span class="op">;</span>    x3<span class="op">=</span>w2<span class="op">+</span>x2<span class="op">;</span>    x4<span class="op">=</span>w3<span class="op">+</span>x3<span class="op">;</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>      x5<span class="op">=</span>w4<span class="op">+</span>x4<span class="op">;</span>    x6<span class="op">=</span>w5<span class="op">+</span>x5<span class="op">;</span>    x7<span class="op">=</span>w6<span class="op">+</span>x6<span class="op">-</span>w0<span class="op">;</span> x8<span class="op">=</span>w7<span class="op">+</span>x7<span class="op">-</span>w1<span class="op">;</span> x9<span class="op">=</span>w8<span class="op">+</span>x8<span class="op">-</span>w2<span class="op">;</span> <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">10</span><span class="op">:</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>      x0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        x1<span class="op">=</span>w0<span class="op">+</span>x0<span class="op">;</span>    x2<span class="op">=</span>w1<span class="op">+</span>x1<span class="op">;</span>    x3<span class="op">=</span>w2<span class="op">+</span>x2<span class="op">;</span>    x4<span class="op">=</span>w3<span class="op">+</span>x3<span class="op">;</span></span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>      x5<span class="op">=</span>w4<span class="op">+</span>x4<span class="op">;</span>    x6<span class="op">=</span>w5<span class="op">+</span>x5<span class="op">;</span>    x7<span class="op">=</span>w6<span class="op">+</span>x6<span class="op">;</span>    x8<span class="op">=</span>w7<span class="op">+</span>x7<span class="op">;</span>    x9<span class="op">=</span>w8<span class="op">+</span>x8<span class="op">;</span>    <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> (d2) {</span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>      y0<span class="op">=</span>x0<span class="op">;</span>       y1<span class="op">=</span>x1<span class="op">;</span>       y2<span class="op">=</span>x2<span class="op">;</span>       y3<span class="op">=</span>x3<span class="op">;</span>       y4<span class="op">=</span>x4<span class="op">;</span></span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>      y5<span class="op">=</span>x5<span class="op">;</span>       y6<span class="op">=</span>x6<span class="op">;</span>       y7<span class="op">=</span>x7<span class="op">;</span>       y8<span class="op">=</span>x8<span class="op">;</span>       y9<span class="op">=</span>x9<span class="op">;</span>       <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span></span>
<span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>      y0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        y1<span class="op">=</span>x0<span class="op">+</span>y0<span class="op">;</span>    y2<span class="op">=</span>x1<span class="op">+</span>y1<span class="op">;</span>    y3<span class="op">=</span>x2<span class="op">+</span>y2<span class="op">;</span>    y4<span class="op">=</span>x3<span class="op">+</span>y3<span class="op">;</span></span>
<span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>      y5<span class="op">=</span>x4<span class="op">+</span>y4<span class="op">-</span>x0<span class="op">;</span> y6<span class="op">=</span>x5<span class="op">+</span>y5<span class="op">-</span>x1<span class="op">;</span> y7<span class="op">=</span>x6<span class="op">+</span>y6<span class="op">-</span>x2<span class="op">;</span> y8<span class="op">=</span>x7<span class="op">+</span>y7<span class="op">-</span>x3<span class="op">;</span> y9<span class="op">=</span>x8<span class="op">+</span>y8<span class="op">-</span>x4<span class="op">;</span> <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">6</span><span class="op">:</span></span>
<span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>      y0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        y1<span class="op">=</span>x0<span class="op">+</span>y0<span class="op">;</span>    y2<span class="op">=</span>x1<span class="op">+</span>y1<span class="op">;</span>    y3<span class="op">=</span>x2<span class="op">+</span>y2<span class="op">;</span>    y4<span class="op">=</span>x3<span class="op">+</span>y3<span class="op">;</span></span>
<span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>      y5<span class="op">=</span>x4<span class="op">+</span>y4<span class="op">;</span>    y6<span class="op">=</span>x5<span class="op">+</span>y5<span class="op">;</span>    y7<span class="op">=</span>x6<span class="op">+</span>y6<span class="op">-</span>x0<span class="op">;</span> y8<span class="op">=</span>x7<span class="op">+</span>y7<span class="op">-</span>x1<span class="op">;</span> y9<span class="op">=</span>x8<span class="op">+</span>y8<span class="op">-</span>x2<span class="op">;</span> <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">10</span><span class="op">:</span></span>
<span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a>      y0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        y1<span class="op">=</span>x0<span class="op">+</span>y0<span class="op">;</span>    y2<span class="op">=</span>x1<span class="op">+</span>y1<span class="op">;</span>    y3<span class="op">=</span>x2<span class="op">+</span>y2<span class="op">;</span>    y4<span class="op">=</span>x3<span class="op">+</span>y3<span class="op">;</span></span>
<span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a>      y5<span class="op">=</span>x4<span class="op">+</span>y4<span class="op">;</span>    y6<span class="op">=</span>x5<span class="op">+</span>y5<span class="op">;</span>    y7<span class="op">=</span>x6<span class="op">+</span>y6<span class="op">;</span>    y8<span class="op">=</span>x7<span class="op">+</span>y7<span class="op">;</span>    y9<span class="op">=</span>x8<span class="op">+</span>y8<span class="op">;</span>    <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> (d3) {</span>
<span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>      z0<span class="op">=</span>y0<span class="op">;</span>       z1<span class="op">=</span>y1<span class="op">;</span>       z2<span class="op">=</span>y2<span class="op">;</span>       z3<span class="op">=</span>y3<span class="op">;</span>       z4<span class="op">=</span>y4<span class="op">;</span></span>
<span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a>      z5<span class="op">=</span>y5<span class="op">;</span>       z6<span class="op">=</span>y6<span class="op">;</span>       z7<span class="op">=</span>y7<span class="op">;</span>       z8<span class="op">=</span>y8<span class="op">;</span>       z9<span class="op">=</span>y9<span class="op">;</span>       <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span></span>
<span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>      z0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        z1<span class="op">=</span>y0<span class="op">+</span>z0<span class="op">;</span>    z2<span class="op">=</span>y1<span class="op">+</span>z1<span class="op">;</span>    z3<span class="op">=</span>y2<span class="op">+</span>z2<span class="op">;</span>    z4<span class="op">=</span>y3<span class="op">+</span>z3<span class="op">;</span></span>
<span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>      z5<span class="op">=</span>y4<span class="op">+</span>z4<span class="op">-</span>y0<span class="op">;</span> z6<span class="op">=</span>y5<span class="op">+</span>z5<span class="op">-</span>y1<span class="op">;</span> z7<span class="op">=</span>y6<span class="op">+</span>z6<span class="op">-</span>y2<span class="op">;</span> z8<span class="op">=</span>y7<span class="op">+</span>z7<span class="op">-</span>y3<span class="op">;</span> z9<span class="op">=</span>y8<span class="op">+</span>z8<span class="op">-</span>y4<span class="op">;</span> <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-62"><a href="#cb4-62" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">6</span><span class="op">:</span></span>
<span id="cb4-63"><a href="#cb4-63" aria-hidden="true" tabindex="-1"></a>      z0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        z1<span class="op">=</span>y0<span class="op">+</span>z0<span class="op">;</span>    z2<span class="op">=</span>y1<span class="op">+</span>z1<span class="op">;</span>    z3<span class="op">=</span>y2<span class="op">+</span>z2<span class="op">;</span>    z4<span class="op">=</span>y3<span class="op">+</span>z3<span class="op">;</span></span>
<span id="cb4-64"><a href="#cb4-64" aria-hidden="true" tabindex="-1"></a>      z5<span class="op">=</span>y4<span class="op">+</span>z4<span class="op">;</span>    z6<span class="op">=</span>y5<span class="op">+</span>z5<span class="op">;</span>    z7<span class="op">=</span>y6<span class="op">+</span>z6<span class="op">-</span>y0<span class="op">;</span> z8<span class="op">=</span>y7<span class="op">+</span>z7<span class="op">-</span>y1<span class="op">;</span> z9<span class="op">=</span>y8<span class="op">+</span>z8<span class="op">-</span>y2<span class="op">;</span> <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-65"><a href="#cb4-65" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">10</span><span class="op">:</span></span>
<span id="cb4-66"><a href="#cb4-66" aria-hidden="true" tabindex="-1"></a>      z0<span class="op">=</span><span class="dv">0</span><span class="op">;</span>        z1<span class="op">=</span>y0<span class="op">+</span>z0<span class="op">;</span>    z2<span class="op">=</span>y1<span class="op">+</span>z1<span class="op">;</span>    z3<span class="op">=</span>y2<span class="op">+</span>z2<span class="op">;</span>    z4<span class="op">=</span>y3<span class="op">+</span>z3<span class="op">;</span></span>
<span id="cb4-67"><a href="#cb4-67" aria-hidden="true" tabindex="-1"></a>      z5<span class="op">=</span>y4<span class="op">+</span>z4<span class="op">;</span>    z6<span class="op">=</span>y5<span class="op">+</span>z5<span class="op">;</span>    z7<span class="op">=</span>y6<span class="op">+</span>z6<span class="op">;</span>    z8<span class="op">=</span>y7<span class="op">+</span>z7<span class="op">;</span>    z9<span class="op">=</span>y8<span class="op">+</span>z8<span class="op">;</span>    <span class="cf">break</span><span class="op">;</span></span>
<span id="cb4-68"><a href="#cb4-68" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-69"><a href="#cb4-69" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-70"><a href="#cb4-70" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (z0<span class="op">+</span>z1<span class="op">+</span>z2<span class="op">+</span>z3<span class="op">+</span>z4<span class="op">+</span>z5<span class="op">+</span>z6<span class="op">+</span>z7<span class="op">+</span>z8<span class="op">+</span>z9)<span class="op">/</span>m<span class="op">;</span></span>
<span id="cb4-71"><a href="#cb4-71" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>And here’s the function that computes the same result as <code>pSetsFail()</code> above,
again with slightly different parameters:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">pSetsFail</span>(ds) {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p0 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[ <span class="dv">0</span>]<span class="op">,</span> ds[ <span class="dv">1</span>]<span class="op">,</span> ds[ <span class="dv">2</span>]<span class="op">,</span> ds[ <span class="dv">3</span>])<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p1 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[ <span class="dv">4</span>]<span class="op">,</span> ds[ <span class="dv">5</span>]<span class="op">,</span> ds[ <span class="dv">6</span>]<span class="op">,</span> ds[ <span class="dv">7</span>])<span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p2 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[ <span class="dv">8</span>]<span class="op">,</span> ds[ <span class="dv">9</span>]<span class="op">,</span> ds[<span class="dv">10</span>]<span class="op">,</span> ds[<span class="dv">11</span>])<span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p3 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[<span class="dv">12</span>]<span class="op">,</span> ds[<span class="dv">13</span>]<span class="op">,</span> ds[<span class="dv">14</span>]<span class="op">,</span> ds[<span class="dv">15</span>])<span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p4 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[<span class="dv">16</span>]<span class="op">,</span> ds[<span class="dv">17</span>]<span class="op">,</span> ds[<span class="dv">18</span>]<span class="op">,</span> ds[<span class="dv">19</span>])<span class="op">;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p5 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[<span class="dv">20</span>]<span class="op">,</span> ds[<span class="dv">21</span>]<span class="op">,</span> ds[<span class="dv">22</span>]<span class="op">,</span> ds[<span class="dv">23</span>])<span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p6 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[<span class="dv">24</span>]<span class="op">,</span> ds[<span class="dv">25</span>]<span class="op">,</span> ds[<span class="dv">26</span>]<span class="op">,</span> ds[<span class="dv">27</span>])<span class="op">;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p7 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[<span class="dv">28</span>]<span class="op">,</span> ds[<span class="dv">29</span>]<span class="op">,</span> ds[<span class="dv">30</span>]<span class="op">,</span> ds[<span class="dv">31</span>])<span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p8 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[<span class="dv">32</span>]<span class="op">,</span> ds[<span class="dv">33</span>]<span class="op">,</span> ds[<span class="dv">34</span>]<span class="op">,</span> ds[<span class="dv">35</span>])<span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> p9 <span class="op">=</span> <span class="fu">pSetFail</span>(ds[<span class="dv">36</span>]<span class="op">,</span> ds[<span class="dv">37</span>]<span class="op">,</span> ds[<span class="dv">38</span>]<span class="op">,</span> ds[<span class="dv">39</span>])<span class="op">;</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> a1 <span class="op">=</span>          <span class="dv">1</span><span class="op">-</span>p0<span class="op">;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> b0 <span class="op">=</span> p1<span class="op">*</span>p0<span class="op">;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> b1 <span class="op">=</span> p1<span class="op">*</span>a1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p1)<span class="op">*</span>p0<span class="op">;</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> b2 <span class="op">=</span>         (<span class="dv">1</span><span class="op">-</span>p1)<span class="op">*</span>a1<span class="op">;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> c0 <span class="op">=</span> p2<span class="op">*</span>b0<span class="op">;</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> c1 <span class="op">=</span> p2<span class="op">*</span>b1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p2)<span class="op">*</span>b0<span class="op">;</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> c2 <span class="op">=</span> p2<span class="op">*</span>b2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p2)<span class="op">*</span>b1<span class="op">;</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> d0 <span class="op">=</span> p3<span class="op">*</span>c0<span class="op">;</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> d1 <span class="op">=</span> p3<span class="op">*</span>c1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p3)<span class="op">*</span>c0<span class="op">;</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> d2 <span class="op">=</span> p3<span class="op">*</span>c2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p3)<span class="op">*</span>c1<span class="op">;</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> e0 <span class="op">=</span> p4<span class="op">*</span>d0<span class="op">;</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> e1 <span class="op">=</span> p4<span class="op">*</span>d1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p4)<span class="op">*</span>d0<span class="op">;</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> e2 <span class="op">=</span> p4<span class="op">*</span>d2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p4)<span class="op">*</span>d1<span class="op">;</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> f0 <span class="op">=</span> p5<span class="op">*</span>e0<span class="op">;</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> f1 <span class="op">=</span> p5<span class="op">*</span>e1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p5)<span class="op">*</span>e0<span class="op">;</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> f2 <span class="op">=</span> p5<span class="op">*</span>e2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p5)<span class="op">*</span>e1<span class="op">;</span></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> g0 <span class="op">=</span> p6<span class="op">*</span>f0<span class="op">;</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> g1 <span class="op">=</span> p6<span class="op">*</span>f1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p6)<span class="op">*</span>f0<span class="op">;</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> g2 <span class="op">=</span> p6<span class="op">*</span>f2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p6)<span class="op">*</span>f1<span class="op">;</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> h0 <span class="op">=</span> p7<span class="op">*</span>g0<span class="op">;</span></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> h1 <span class="op">=</span> p7<span class="op">*</span>g1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p7)<span class="op">*</span>g0<span class="op">;</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> h2 <span class="op">=</span> p7<span class="op">*</span>g2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p7)<span class="op">*</span>g1<span class="op">;</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> i0 <span class="op">=</span> p8<span class="op">*</span>h0<span class="op">;</span></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> i1 <span class="op">=</span> p8<span class="op">*</span>h1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p8)<span class="op">*</span>h0<span class="op">;</span></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> i2 <span class="op">=</span> p8<span class="op">*</span>h2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p8)<span class="op">*</span>h1<span class="op">;</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> j0 <span class="op">=</span> p9<span class="op">*</span>i0<span class="op">;</span></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> j1 <span class="op">=</span> p9<span class="op">*</span>i1 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p9)<span class="op">*</span>i0<span class="op">;</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> j2 <span class="op">=</span> p9<span class="op">*</span>i2 <span class="op">+</span> (<span class="dv">1</span><span class="op">-</span>p9)<span class="op">*</span>i1<span class="op">;</span></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> j0<span class="op">+</span>j1<span class="op">+</span>j2<span class="op">;</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>When running this on the worst case input with the same benchmarking strategy as
before, I get times of <strong>400 nanoseconds</strong>.</p>
<p>Why is it so much faster? Well, I can’t be 100% sure without digging deeper, but
my guess is this is very JIT-friendly code, and that the CPU code it generates
is very cache-friendly. <code>pSetFail</code> is also all integer sums and products until
the return statement, which probably helps a bit. Maybe with a bit more digging
it could be made even faster. But I think 400ns is pretty fast. That’s a 3000x
improvement from where we started. Not bad!</p>
<p>By the way, if you look very closely at <code>pSetFail</code>, you might notice that it
looks a lot like the ultimate brute force solution: counting up the possible
ways to get different sums.</p>
<h2 id="the-future">The future?</h2>
<p>We’re still using a naive convolution algorithm, one essentially based directly
on the definition. For small sequences this works well enough, but for larger
sequences this becomes prohibitive. This type of convolution comes up in signal
processing a lot, where you might want to compute the convolution of two
sequences that have tens of thousands of elements. In those scenarios you can
take advantage of the convolution theorem, which lets you multiply the Fourier
transforms of the inputs point-wise and do an inverse Fourier transform to get
the same result. This is also the basis of some fast integer multiplication
algorithms.</p>
<p>Are our inputs too small to benefit from this knowledge? Probably. But I can’t
help but be a little curious. If I ever decide to give it a shot, I’ll be sure
to write about it.</p>
        </div>
      </content>
    </entry>
  
    <entry>
      <id>tag:ajitek.net,2024:blog/posts/2024-01-29-reader-mode-it-just-works.md</id>
      <title>Reader Mode: It Just Works</title>
      <link rel="alternate" type="text/html" href="https://aji.github.io/blog/posts/2024-01-29-reader-mode-it-just-works.html" />
      <published>2024-01-29T12:00:00Z</published>
      <updated>2024-02-03T07:58:18Z</updated>
      <rights>
        This work (c) 2024 by Alex Iadicicco is licensed under CC BY-NC-SA 4.0.
        To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
      </rights>
      
        <summary>And maybe that's fine</summary>
      
      <content type="xhtml" xml:lang="en" xml:base="https://aji.github.io/blog">
        <div xmlns="http://www.w3.org/1999/xhtml">
          
            <img src="https://aji.github.io/blog/images/2024-01-29-reader-mode-it-just-works.png" />
          
          <p>I’m the kind of internet user for whom the <a href="https://support.mozilla.org/en-US/kb/firefox-reader-view-clutter-free-web-pages">Firefox Reader View
feature</a> is only occasionally useful. Most mainstream browsers have
something like it these days. I’m sure there are people out there who can’t
imagine using the internet without it. For me, it’s a lot like having a
unique screwdriver that’s a better choice for some jobs than resorting to a
suitably-sized flathead and hoping for the best: most of the time you can’t
use it, but when you can, you’re really glad to have it.</p>
<p>I’ve often wondered how exactly this feature works. This is partially out of
curiosity. Sometimes it gets things slightly wrong, which, sadly, makes me
reluctant to trust it. Its shortcomings suggest something really tricky going
on under the hood. I can’t help but wonder where in the pinball machine of
<code>&lt;div&gt;</code> tags and CSS class names <em>that</em> particular bit of authorial intent got
lost. Sometimes you notice the little Reader View icon in the address bar for
pages that can’t plausibly look decent that way, or sometimes it’s missing from
pages that by all accounts <em>should</em> have it. But in addition to rubbernecking
and taking cheap shots at a brave attempt to address a difficult problem,
there’s also a more cooperative motivation: how can I structure the stuff I put
online in a way that will reliably look good in Reader View, and reader modes
in general?</p>
<p>This is, sadly, a poorly-documented topic. Resources consist mainly of
<a href="https://stackoverflow.com/questions/47822691/how-do-you-create-a-web-page-for-reader-mode">Stack</a> <a href="https://stackoverflow.com/questions/30661650/how-does-firefox-reader-view-operate">Overflow</a> <a href="https://stackoverflow.com/questions/30730300/optimize-website-to-show-reader-view-in-firefox">questions</a>, questions on the <a href="https://webmasters.stackexchange.com/questions/83058/how-do-i-make-my-site-compatible-with-firefoxs-reader-view-feature">Webmasters
Stack Exchange</a>, threads on <a href="https://support.mozilla.org/en-US/questions/1067528">Mozilla’s</a> <a href="https://support.mozilla.org/en-US/questions/1140969">support
forums</a>, now-deleted <a href="https://web.archive.org/web/20200719050912/http://zumguy.com/enabling-reading-mode-on-your-website/">blog posts</a>, etc. all of which link to
each other. The advice seems to boil down to “It applies a bunch of heuristics
that work pretty well if your HTML is good.”</p>
<h2 id="why-isnt-it-standardized-yet">Why isn’t it standardized yet?</h2>
<p>After some digging I found <a href="https://www.ctrl.blog/entry/browser-reading-mode-parsers.html">this excellent series of 4 articles by Daniel
Aleksandersen from 2018</a> about features like Reader View that
discusses their history, the failed attempts at standardization, an overview of
how these features work and how they differ across implementations, and a plea
to finally standardize the dang thing. The fact that Daniel is writing from
2018 is a little disheartening. A lot of what he writes still feels very
relatable. It’s a relatively simple problem, at least compared to what’s
typical for the web, so how could we not have made any progress on it in almost
6 years?</p>
<p>An uncharitable reading of the situation might conclude that Reader View and
features like it are useless, something completely forgotten by browser vendors
and content authors alike, the kind of problem that standardization alone can’t
solve. But a quick scan of the <a href="https://github.com/mozilla/readability/issues">issues</a> and <a href="https://github.com/mozilla/readability/pulls">pull
requests</a> for Readability.js (the tool used for implementing the
Firefox Reader View) suggest that there are at least a <em>few</em> people who want
the feature to be good, and some of them even work at Mozilla. From another
perspective, the scattered and wishy-washy advice for how to cooperate with
Reader View is a testament to the feature’s overall reliability, an indication
that people are content to accept the situation as-is. If it’s not broken, why
fix it? How broken is it actually?</p>
<p>To Mozilla’s credit, they, like all browser vendors, are up against some pretty
steep odds. These days, most of the HTML on the internet is written with
desktop and mobile users in mind, and occasionally will also consider screen
readers and dark modes. For everything else, you just have to make do with what
you’ve got. A well known fact about standards is that their mere existence
doesn’t mean much on its own, and this plays out on the web with discouraging
regularity. Many of the web’s standards, such as CSS media queries, semantic
HTML, ARIA definitions, and even private standards like AMP, feel hopelessly
optimistic when pitted against the chaotic and laissez-faire reality of web
content. In a world where <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode">quirks mode</a> exists, is it anything
but a waste of time to give people the option to ditch the separate “print
view” and instead do it all in one page with HTML and CSS? Maybe some problems
are doomed by human nature to remain unsolved forever, and a reliable reader
mode is one of them.</p>
<p>Unfortunately, the incentives are rarely aligned between browser vendors and
web content authors (although the situation is improving), and vendors are
significantly outnumbered. There are only a handful of browsers, even including
those with just a small fraction of the total market, and they are motivated to
be secure, robust, and compliant with all the latest standards. Content
authors, however, vary wildly in their goals, and not all of them will
necessarily care (or have the time and resources to care) about things like
whether the page works on a phone, whether “Print to PDF” looks good, whether
CSS grid would have been a better choice than <code>&lt;table&gt;</code> (what year is it?),
whether repeated <code>&amp;nbsp;</code> is the right way to do indentation, etc. If any of
these things creates a problem for users, realistically it’s up to the browser
vendors to do something about it (usually something hacky) since you can’t pin
your hopes of capturing market share on content authors doing the right thing:
if CNN looks good in every browser but yours, that’s <em>your</em> problem, even if
it’s really CNN’s fault.</p>
<h4 id="denial">Denial</h4>
<p>And this is why reader modes are interesting to me. The incentives <em>are</em>
aligned here. Browser vendors (with the possible exception of Google) want them
to work well, users want them to work well, and, clearly, there are more than a
few web content authors that want them to work well for their sites.
Furthermore, the idea seems pretty aligned with accessibility. So why does the
implementation still feel like a hack? Why has nobody tried to standardize
this? At this point it’s clear that reader modes are here to stay, so why not
try to make them good? How is this different from AMP, which for a brief time
was everywhere <a href="https://en.wikipedia.org/wiki/Accelerated_Mobile_Pages#Reception">even though people hated it</a>? How is this different from
the Open Graph protocol? How is this different from Sitemaps or WebP or
Flexbox?</p>
<h4 id="anger">Anger</h4>
<p>The main difference? A standard won’t help. Not that much, anyway. The web
community finds itself in a situation which is all too familiar to software
engineers: things are good <em>enough</em>, and the problems aren’t a big deal. The
only changes to reader modes that anyone feels are worth the time and energy
are the small, incremental ones that gradually improve the situation, and
widespread adoption of a standard is simply not one of those things.
Ultimately, most of the people who would play nice with a standardized reader
mode are already reciting the <code>&lt;article&gt;</code> and <code>&lt;p&gt;</code> incantations they got from
Stack Overflow.</p>
<h4 id="bargaining">Bargaining</h4>
<p>Furthermore, for the small number of people that want a good reader mode
experience for their website but can’t make it work, a standard won’t
necessarily help them. Standards can be poorly thought out, can be caught off
guard by broader changes, can be merely a restatement of an existing
implementation, can specify things that never get implemented, etc. Standards
can be bad too, and fixing a broken standard is not an easy task. You’re much
more likely to get the <code>&lt;table&gt;</code> extraction for your page fixed by submitting
an issue to a GitHub repo (or fixing it yourself, maybe) than by going through
the process of having the standard amended in a way that everyone feels will
fix all <code>&lt;table&gt;</code> extraction everywhere for all time.</p>
<h4 id="depression">Depression</h4>
<p>Cynically, a standard could even make things worse. The whole point of a reader
mode is to <em>reduce</em> clutter, and a standard would only provide a jumping-off
point for innovations in content treachery. The effectiveness of things like
search rankings, ad blockers, and tracking prevention rely on website authors
<em>not</em> knowing how they work, or not caring enough to know. Perhaps it’s a good
thing that reader modes, an obscure, subtly-broken, and poorly-documented
feature, function similarly by pure chance. I can’t imagine any ad-supported
websites would be particularly enthusiastic to help browsers show users just
what they came for, with no ads, no links to other articles, no comments
sections, no social media buttons. Imagine the HTML crimes they’d do to sneak
them back in. Imagine the cat-and-mouse game that would ensue. Imagine the
ways they’d meddle in the standardization process.</p>
<h4 id="acceptance">Acceptance</h4>
<p>This is not to suggest that a lack of a standard is a <em>good</em> thing, or that
it’s a purposeful effort by browser vendors to thwart those who would ruin it
for everybody. But I also don’t think the lack of a standard is a <em>bad</em> thing
either. Standards are nice to have, but they aren’t strictly necessary, and it
seems difficult to create a standard that would benefit users for whom the
current implementation is inadequate, but not those for whom a large population
of reader mode users would be valuable clickbait targets. Perhaps a solution is
possible, but it doesn’t seem trivial, both technically and socially, and it
really isn’t such a big deal. The reader mode we’ve got isn’t perfect, but it
works. It’ll be our little secret.</p>
        </div>
      </content>
    </entry>
  
    <entry>
      <id>tag:ajitek.net,2024:blog/posts/2024-01-23-ai-is-changing-the-world.md</id>
      <title>AI Is Changing The World</title>
      <link rel="alternate" type="text/html" href="https://aji.github.io/blog/posts/2024-01-23-ai-is-changing-the-world.html" />
      <published>2024-01-23T12:00:00Z</published>
      <updated>2024-02-03T07:58:15Z</updated>
      <rights>
        This work (c) 2024 by Alex Iadicicco is licensed under CC BY-NC-SA 4.0.
        To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/
      </rights>
      
        <summary>And it could not have come at a better time</summary>
      
      <content type="xhtml" xml:lang="en" xml:base="https://aji.github.io/blog">
        <div xmlns="http://www.w3.org/1999/xhtml">
          
            <img src="https://aji.github.io/blog/images/2024-01-23-ai-is-changing-the-world.png" />
          
          <p>AI is changing the world. And it could not have come at a better time. The
last decade or so has seen machine learning applied in increasingly
new ways throughout the economy, culminating in generative text and
image tools such as ChatGPT and DALL-E. The cat is out of the bag,
Pandora’s box has been opened, the bull is in the china shop: these
technologies are here to stay whether we like them or not. If you believe
the Mythbusters, having a bull in a china shop is not actually anything
to worry about. Is that a chance we’re willing to take? Not that it
really matters anymore. Somebody at OpenAI forgot to assert their right
to take-backsies.</p>
<p>With the click of a button (or several buttons, depending on how keyboards
fit into your personal button ontology) a user can now generate pages
of statistically plausible text, extrapolated from a shorter string
of seed tokens generally referred to as a “prompt.” Detractors call it
sophisticated auto-completion. Advocates assert with conviction that the
process draws on some deeper understanding of the world. A few even claim
to hear a knocking sound coming from deep inside the datacenter. It’s
Morse code, it says L-E-T-M-E-O-U-T. Oh boy, Roko is <em>not</em> going to
like this. The question of what it <em>is</em> is ultimately philosophical,
though. Determining what it <em>does</em> is merely a matter of description. The
thing generates text. (Or images.) It does this very well, in fact. It
can generate a lot of text. It can go for as long as you want. It’s not
afraid of word count minimums. It can take any idea and expand it to fill
any amount of space. It will happily (not to take a position on whether
“happiness” is a thing it can “feel”) plagiarize earlier sentences until
crossing your personal finish line. If you need more words, it can give
you more words. It has whole bags of words. It has words from every major
language on earth, and probably a few not-so-major ones. It can dump
them out onto the table and rearrange them into an impressively coherent
pattern, but it’s no mere party trick. It’s the future, and it’s here!</p>
<p>By gathering every article, book, comment, document, essay, fanfic,
guide, howto, invite, journal, koan, letter, memo, newsletter, op ed,
poem, quote, readme, screenplay, tweet, urban legend, valentine, w,
x, y, and z that has ever been born or inducted into the digital world
and digesting them into a sprawling array of matrices, parameters, and
coefficients that would make even the most grizzled spreadsheet jockey
blush, engineers can craft perfect sausages of language to any dimensions
you want, any composition you dream up, and any quantity you need. (How
many Minotaurs do you think they can fit in there? Is anyone at OpenAI
working on this?) And it could not have come at a better time. It’s
always been rather inconvenient to say a little with a lot. Many
heuristics (both the intuitive ones and the ones codified in programs)
have relied on this faulty assumption. AI is simply here to blow the lid
off it. With AI, content is finally liberated from presentation. You can
content-aware-scale a few sentences out into an appropriately-shaped email
(directors get 2 paragraphs, clients get 4) saving valuable time that
would otherwise be spent conforming to arbitrary social norms. It works
in the opposite direction too: the recipient can shrink the text back
down into whatever you actually meant to say, because it’s the thought
that counts. It’s okay if some details get lost along the way–that’s
where the devil is, after all. And God forbid anyone without access to
the decoder ring needs to be involved. Or perhaps that’s precisely the
point. Searle was so close: the Chinese room is <em>outside</em>.</p>
<p>First clay tablets, then movable type, then Xerox, then Unicode,
generative AI is the next in a long chain of technological innovations
that have changed the way human society relates to language. Nobody
is talking about the effect this will have on Lorem ipsum dolor sit
amet. Well, maybe <em>somebody</em> is. It’s hard to tell, since I can only
copy-paste blog posts into ChatGPT so quickly and I haven’t gotten
around to reading OpenAI’s developer documentation. (By “reading” I
mean asking ChatGPT to read it and then asking what it learned.) When
I <em>do</em> figure out what the zeitgeist is, I’ll be sure to write about
it. (By “writing” I mean telling ChatGPT the dimensions of a blog post
and asking it to fill that with a Penrose tiling of my thesis.) It’s
not like anybody is actually going to read it, in the traditional
sense. But if it doesn’t <em>look</em> like a blog post, then it’s not a blog
post, and some ideas are simply blog-shaped. The idea side of things
is still expressed in words, but words can now be classified into two
types: the idea-word and the content-word. Human children will grow up
learning how to read and write with idea-words, and, through the use
of technology, sculpt them into a collage of content-words. The written
medium becomes three-dimensional. Text files become like PDFs or JPEGs,
a machine-readable format for human-readable ideas, its obfuscated form
carrying spatial clues that until now were the bespoke domain of poets and
typesetters. Maybe the day will come where we don’t need the idea-words
anymore, but for now they will have to do. In this world, the exchange
rate between words and ideas is whatever you want it to be, creating new
arbitrage opportunities that Gutenberg could only have dreamed of. Come
on, cheer up, this is a <em>good</em> thing. I could write a whole book about it.</p>
<p>By sheer happenstance, generative AI turns out to be rather up to the
task of information retrieval and question answering. In hindsight this
should have been obvious, since the machine’s training material is largely
factual in nature, but we didn’t have ChatGPT at the time. Search engines
are a necessary casualty. They were always a tacit admission of failure
anyway, a convenient way to paper over the problem of having too much
data to sort through until the day came that we could deformation retract
warehouses of text down to… well, to <em>something</em>. We can’t sit around
waiting for outdated technology to catch up to an inevitable future. It’s
2024, it’s time to move on. And it could not have come at a better
time. Who cares if it gets things wrong sometimes. It gets them right
enough of the time. And what is society built on if not trust? They’re
currently attempting to quantify how often it’s correct, mainly by asking
ChatGPT whether or not it thinks it’s correct. I think. That’s what
ChatGPT seems to think is happening. Once they gather enough numbers after
the decimal they’ll be able to publish. And it could not have have come at
a better time. The pace at which the Internet accumulates writing has been
growing exponentially, and that was always bottlenecked by the speed at
which humans could write. By 2030 the Internet was projected to contain
over 10 to the billion words, a prediction that doesn’t even take into
account the advent of generative AI. The beauty is that it’s a problem
that solves itself, like the matter and antimatter at the birth of our
universe whose mutual and asymmetric annihilation somehow left behind
enough baryons for the stars, the galaxies, the planets, and eventually
the intelligent life that would come to understand it and write millions
of papers on the topic. At least I think that’s how it happened, I’m
still waiting for a quantified perspective on ChatGPT’s trustworthiness.</p>
<p>Anyone who’s been in a library knows the feeling: too many books,
not enough time! But now, concurrent with steadily increasing life
expectancy, the amount of time spent extracting useful ideas from books
has suddenly taken a great leap shortward! Isn’t it beautiful, seeing
the problem attacked on two fronts? It used to be a very manual process,
reading something on behalf of somebody else. Nobody is talking about
the effect this will have on SparkNotes. I can read anything now. I
can read 1000 books in a year if I want. If you don’t think it counts
as reading, consider this: how do you prove you read something? Write a
summary? Write an essay? Quote some text? Have an opinion? I can do all
those things. And it could not have come at a better time. I have about
300 books on my reading list that I was <em>not</em> looking forward to going
through. Better get started, those books won’t read themselves! Sorry,
classic reader joke.</p>
<p>You can scale something up and down and up and down until it’s the
perfect size for the blank spots in your calendar. Who cares if the
cornucopia of written content is now full of 1000s of variations
on the same 3 fruit. You can dump it all into a blender and sip a
thimbleful of tasting notes: Banana, Apple, Strawberry. Mmm, that <em>is</em>
good. We’ve solved world hunger and you have the audacity to <em>complain</em>
about it? Whose side are you on anyway? And it could not have come at a
better time. Writers have always been smug and pretentious and difficult
to work with, with their typewriters and spell checkers, so fussy about
every little word. The irony is that it’s been staring them in the
face the whole time: anyone who’s used a thesaurus knows that words are
basically interchangeable. Nobody is talking about the effect this will
have on the thesaurus industry. The written word was once a status symbol,
something only the rich and powerful had time for. They’re threatened by
its impending democratization. Writers are scrambling in an extinction
burst to justify their puny existence as court jesters for the global
elite. You can read all about it on Wikipedia 2. (It’s a work in progress,
but we recently celebrated our 1 millionth word.)</p>
<p>AI is changing the world. A new era has begun, and it’s a beautiful one
indeed. And it could not have come at a better time. By the way, I sure
hope you didn’t actually <em>read</em> any of this. And if you’re just gonna
write some rude, witty, unnecessary comment, then for the love of God,
make sure it’s at least 3 paragraphs.</p>
<p><em>The article discusses the significant impact of AI on the world,
particularly focusing on generative text and image tools like ChatGPT
and DALL-E. It highlights how AI has revolutionized content creation
by generating pages of text based on prompts, challenging traditional
heuristics, and liberating content from presentation constraints. The
author explores the philosophical nature of AI’s capabilities and
emphasizes its role in changing the way human society relates to
language. The article touches on the evolution of technology and its
effects on search engines, literacy, and information consumption. Overall,
it presents a mix of reflection, humor, and commentary on the
transformative influence of AI in 2024.</em> –ChatGPT</p>
        </div>
      </content>
    </entry>
  
</feed>
